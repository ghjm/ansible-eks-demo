---
- hosts: demo_clusters
  gather_facts: false
  tasks:
    - include_role:
        role: preflight

    - block:
      
      - name: Create IAM role for EKS cluster
        community.aws.iam_role:
          region: "{{ aws_region }}"
          name: "{{ unique_id }}-eks-cluster-service-role"
          assume_role_policy_document: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "eks.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }
          managed_policies:
            - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
          purge_policies: true
        register: eks_role
  
      - name: Create security group for EKS cluster
        amazon.aws.ec2_group:
          region: "{{ aws_region }}"
          name: "{{ unique_id }}-cluster"
          description: "{{ unique_id }} EKS cluster security group"
          purge_rules: true
          purge_rules_egress: true
  
      - name: Create VPC for EKS cluster
        amazon.aws.ec2_vpc_net:
          region: "{{ aws_region }}"
          name: "{{ unique_id }}-vpc"
          cidr_block: "{{ aws_vpc_cidr }}"
          state: present
        register: eks_vpc
  
      - name: Set fact for the VPC ID
        set_fact:
          eks_vpc_id: "{{ eks_vpc.vpc.id }}"
  
      - name: Create private subnets for EKS cluster
        amazon.aws.ec2_vpc_subnet:
          region: "{{ aws_region }}"
          vpc_id: "{{ eks_vpc_id }}"
          az: "{{ item.az }}"
          cidr: "{{ item.cidr }}"
          resource_tags:
            Name: "{{ unique_id }}-private-subnet-{{ item.az }}"
        register: eks_private_subnets
        loop: "{{ aws_vpc_private_subnets }}"
  
      - name: Get list of private subnets
        set_fact:
          eks_private_subnets_list: "{{ eks_private_subnets.results | map(attribute='subnet.id') | list }}"
  
      - name: Create public subnets for EKS cluster
        amazon.aws.ec2_vpc_subnet:
          region: "{{ aws_region }}"
          vpc_id: "{{ eks_vpc_id }}"
          az: "{{ item.az }}"
          cidr: "{{ item.cidr }}"
          resource_tags:
            Name: "{{ unique_id }}-public-subnet-{{ item.az }}"
        register: eks_public_subnets
        loop: "{{ aws_vpc_public_subnets }}"
  
      - name: Get list of public subnets
        set_fact:
          eks_public_subnets_list: "{{ eks_public_subnets.results | map(attribute='subnet.id') | list }}"
  
      - name: Create IGW for public subnets
        community.aws.ec2_vpc_igw:
          region: "{{ aws_region }}"
          vpc_id: "{{ eks_vpc_id }}"
          state: present
          tags:
            Name: "{{ unique_id }}-igw"
        register: eks_igw
  
      - name: Create route table to route public subnets via IGW
        community.aws.ec2_vpc_route_table:
          region: "{{ aws_region }}"
          vpc_id: "{{ eks_vpc_id }}"
          subnets: "{{ eks_public_subnets_list }}"
          routes:
            - dest: "0.0.0.0/0"
              gateway_id: "{{ eks_igw.gateway_id }}"
          tags:
            Name: "{{ unique_id }}-igw-route"
  
      - name: Create security group for EKS cluster
        amazon.aws.ec2_group:
          region: "{{ aws_region }}"
          vpc_id: "{{ eks_vpc_id }}"
          name: "{{ unique_id }}-cluster"
          description: "{{ unique_id }} EKS cluster security group"
          purge_rules: true
          purge_rules_egress: true
  
      - name: Create an EKS cluster
        community.aws.aws_eks_cluster:
          region: "{{ aws_region }}"
          name: "{{ unique_id }}-cluster"
          version: 1.19
          role_arn: "{{ eks_role.iam_role.arn }}"
          security_groups:
            - "{{ unique_id }}-cluster"
          subnets: "{{ eks_private_subnets_list }}"
          wait: yes
        register: eks_results
  
      - name: Create IAM role for Fargate
        community.aws.iam_role:
          region: "{{ aws_region }}"
          name: "{{ unique_id }}-eks-fargate-role"
          assume_role_policy_document: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "eks-fargate-pods.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }
          managed_policies:
            - arn:aws:iam::aws:policy/AmazonEKSFargatePodExecutionRolePolicy
          purge_policies: true
        register: fargate_role
  
      - name: Get existing Fargate profiles
        shell: "aws eks list-fargate-profiles --cluster-name {{ unique_id }}-cluster"
        register: fargate_profiles
        changed_when: false
  
      - block:
  
        - name: Create Fargate profile
          shell: "aws eks create-fargate-profile --cluster-name {{ unique_id }}-cluster --fargate-profile-name {{ unique_id }}-fargate --subnets {{ eks_private_subnets_list | join(' ') }} --selectors namespace=default namespace=kube-system namespace=testing --pod-execution-role-arn {{ fargate_role.iam_role.arn }}"
          retries: 3
          delay: 2
  
        - name: Wait for Fargate profile to be created
          shell: "aws eks describe-fargate-profile --cluster-name {{ unique_id }}-cluster --fargate-profile-name {{ unique_id }}-fargate"
          register: fargate_profile_status
          changed_when: false
          until: "fargate_profile_status.rc == 0 and dict(fargate_profile_status.stdout | from_json).fargateProfile.status == 'ACTIVE'"
          retries: 30
          delay: 10
  
        when: "unique_id+'-fargate' not in (dict(fargate_profiles.stdout | from_json).fargateProfileNames | list)"

      - name: Get kubeconfig for the cluster
        shell: "aws eks update-kubeconfig --name {{ unique_id }}-cluster --alias {{ unique_id }}-cluster"

      - name: Create a k8s namespace
        community.kubernetes.k8s:
          context: "{{ unique_id }}-cluster"
          name: testing
          api_version: v1
          kind: Namespace
          state: present

      - name: Deploy the hello world application
        community.kubernetes.k8s:
          context: "{{ unique_id }}-cluster"
          namespace: testing
          state: present
          definition:
            apiVersion: apps/v1
            kind: Deployment
            metadata:
              name: hello-world
            spec:
              selector:
                matchLabels:
                  run: load-balancer-example
              replicas: 2
              template:
                metadata:
                  labels:
                    run: load-balancer-example
                spec:
                  containers:
                    - name: hello-world
                      image: gcr.io/google-samples/node-hello:1.0
                      ports:
                        - containerPort: 8080
                          protocol: TCP

      delegate_to: localhost

